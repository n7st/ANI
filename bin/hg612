#!/usr/bin/env perl

use strict;
use warnings;

use Data::Printer;
use FindBin;

use lib "$FindBin::RealBin/../lib";

use App::Netsplit::Injest::Config;
use App::Netsplit::Injest::Source::HG612;
use App::Netsplit::Injest::Destination::InfluxDB;

my $config = App::Netsplit::Injest::Config->new();

my $report = App::Netsplit::Injest::Source::HG612->new({
    address  => $config->{sources}->{hg612}->{address},
    password => $config->{sources}->{hg612}->{password},
    username => $config->{sources}->{hg612}->{username},
})->poll();

my $destination = App::Netsplit::Injest::Destination::InfluxDB->new({
    address  => $config->{destinations}->{influxdb}->{address},
    database => $config->{sources}->{hg612}->{influxdb_database},
    scheme   => $config->{destinations}->{influxdb}->{scheme},
});

foreach my $type (qw(current max actual_aggregate_tx_power)) {
    if ($report->{$type}->{up} > 0 && $report->{$type}->{down} > 0) {
        $destination->write_entry($type, {
            upstream   => $report->{$type}->{up},
            downstream => $report->{$type}->{down},
        });
    }
}

if ($report->{status}) {
    # Plain text status entry (useful for table or pie chart style output)
    $destination->write_entry('status', { value => $report->{status} });

    my $val = 0;

    if ($report->{status} eq 'Showtime') {
        $val = 4;
    } elsif ($report->{status} eq 'Training') {
        $val = 3;
    } elsif ($report->{status} eq 'Handshake') {
        $val = 2;
    } elsif ($report->{status} eq 'Idle') {
        $val = 1;
    }

    # Write a second entry with an integer value for compatibility with the
    # Grafana traffic lights plugin
    $destination->write_entry('status_i', { value => $val });
}

